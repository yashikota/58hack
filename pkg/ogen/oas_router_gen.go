// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/v1/"
			origElem := elem
			if l := len("/api/v1/"); len(elem) >= l && elem[0:l] == "/api/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "analytics/"
				origElem := elem
				if l := len("analytics/"); len(elem) >= l && elem[0:l] == "analytics/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "daily"
					origElem := elem
					if l := len("daily"); len(elem) >= l && elem[0:l] == "daily" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetDailySummaryRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'm': // Prefix: "monthly"
					origElem := elem
					if l := len("monthly"); len(elem) >= l && elem[0:l] == "monthly" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetMonthlySummaryRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'q': // Prefix: "quarterly"
					origElem := elem
					if l := len("quarterly"); len(elem) >= l && elem[0:l] == "quarterly" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetQuarterlySummaryRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 't': // Prefix: "tags"
					origElem := elem
					if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetTagAnalyticsRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'w': // Prefix: "weekly"
					origElem := elem
					if l := len("weekly"); len(elem) >= l && elem[0:l] == "weekly" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetWeeklySummaryRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'y': // Prefix: "yearly"
					origElem := elem
					if l := len("yearly"); len(elem) >= l && elem[0:l] == "yearly" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetYearlySummaryRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			case 'h': // Prefix: "health"
				origElem := elem
				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleHealthCheckRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'i': // Prefix: "integrations/"
				origElem := elem
				if l := len("integrations/"); len(elem) >= l && elem[0:l] == "integrations/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "service"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "connect"
						origElem := elem
						if l := len("connect"); len(elem) >= l && elem[0:l] == "connect" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleConnectServiceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'd': // Prefix: "d"
						origElem := elem
						if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ata"
							origElem := elem
							if l := len("ata"); len(elem) >= l && elem[0:l] == "ata" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetServiceDataRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'i': // Prefix: "isconnect"
							origElem := elem
							if l := len("isconnect"); len(elem) >= l && elem[0:l] == "isconnect" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "DELETE":
									s.handleDisconnectServiceRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'n': // Prefix: "note"
				origElem := elem
				if l := len("note"); len(elem) >= l && elem[0:l] == "note" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-templates"
					origElem := elem
					if l := len("-templates"); len(elem) >= l && elem[0:l] == "-templates" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetNoteTemplatesRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 's': // Prefix: "s"
					origElem := elem
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetNotesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateNoteRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 's': // Prefix: "search"
							origElem := elem
							if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleSearchNotesRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}
						// Param: "noteId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteNoteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetNoteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleUpdateNoteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "draft"
								origElem := elem
								if l := len("draft"); len(elem) >= l && elem[0:l] == "draft" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleSaveNoteDraftRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'i': // Prefix: "images"
								origElem := elem
								if l := len("images"); len(elem) >= l && elem[0:l] == "images" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleUploadNoteImageRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 's': // Prefix: "share"
								origElem := elem
								if l := len("share"); len(elem) >= l && elem[0:l] == "share" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "DELETE":
										s.handleUnshareNoteRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleShareNoteRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,POST")
									}

									return
								}

								elem = origElem
							case 't': // Prefix: "tags"
								origElem := elem
								if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleAddTagsToNoteRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "tags"
				origElem := elem
				if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleGetAllTagsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}

				elem = origElem
			case 'u': // Prefix: "users/"
				origElem := elem
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "log"
					origElem := elem
					if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "in"
						origElem := elem
						if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleLoginRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					case 'o': // Prefix: "out"
						origElem := elem
						if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleLogoutRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "register"
					origElem := elem
					if l := len("register"); len(elem) >= l && elem[0:l] == "register" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleRegisterUserRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}
				// Param: "userId"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "DELETE":
						s.handleDeleteUserRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "DELETE")
					}

					return
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/v1/"
			origElem := elem
			if l := len("/api/v1/"); len(elem) >= l && elem[0:l] == "/api/v1/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'a': // Prefix: "analytics/"
				origElem := elem
				if l := len("analytics/"); len(elem) >= l && elem[0:l] == "analytics/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "daily"
					origElem := elem
					if l := len("daily"); len(elem) >= l && elem[0:l] == "daily" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetDailySummary"
							r.summary = "Get daily note summary"
							r.operationID = "getDailySummary"
							r.pathPattern = "/api/v1/analytics/daily"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'm': // Prefix: "monthly"
					origElem := elem
					if l := len("monthly"); len(elem) >= l && elem[0:l] == "monthly" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetMonthlySummary"
							r.summary = "Get monthly note summary"
							r.operationID = "getMonthlySummary"
							r.pathPattern = "/api/v1/analytics/monthly"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'q': // Prefix: "quarterly"
					origElem := elem
					if l := len("quarterly"); len(elem) >= l && elem[0:l] == "quarterly" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetQuarterlySummary"
							r.summary = "Get quarterly note summary"
							r.operationID = "getQuarterlySummary"
							r.pathPattern = "/api/v1/analytics/quarterly"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 't': // Prefix: "tags"
					origElem := elem
					if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetTagAnalytics"
							r.summary = "Get tag usage analytics"
							r.operationID = "getTagAnalytics"
							r.pathPattern = "/api/v1/analytics/tags"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'w': // Prefix: "weekly"
					origElem := elem
					if l := len("weekly"); len(elem) >= l && elem[0:l] == "weekly" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetWeeklySummary"
							r.summary = "Get weekly note summary"
							r.operationID = "getWeeklySummary"
							r.pathPattern = "/api/v1/analytics/weekly"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'y': // Prefix: "yearly"
					origElem := elem
					if l := len("yearly"); len(elem) >= l && elem[0:l] == "yearly" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetYearlySummary"
							r.summary = "Get yearly note summary"
							r.operationID = "getYearlySummary"
							r.pathPattern = "/api/v1/analytics/yearly"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			case 'h': // Prefix: "health"
				origElem := elem
				if l := len("health"); len(elem) >= l && elem[0:l] == "health" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "HealthCheck"
						r.summary = "Check API health"
						r.operationID = "healthCheck"
						r.pathPattern = "/api/v1/health"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'i': // Prefix: "integrations/"
				origElem := elem
				if l := len("integrations/"); len(elem) >= l && elem[0:l] == "integrations/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "service"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "connect"
						origElem := elem
						if l := len("connect"); len(elem) >= l && elem[0:l] == "connect" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "ConnectService"
								r.summary = "Connect to an external service"
								r.operationID = "connectService"
								r.pathPattern = "/api/v1/integrations/{service}/connect"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'd': // Prefix: "d"
						origElem := elem
						if l := len("d"); len(elem) >= l && elem[0:l] == "d" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "ata"
							origElem := elem
							if l := len("ata"); len(elem) >= l && elem[0:l] == "ata" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "GetServiceData"
									r.summary = "Get data from a connected service"
									r.operationID = "getServiceData"
									r.pathPattern = "/api/v1/integrations/{service}/data"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'i': // Prefix: "isconnect"
							origElem := elem
							if l := len("isconnect"); len(elem) >= l && elem[0:l] == "isconnect" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "DELETE":
									r.name = "DisconnectService"
									r.summary = "Disconnect from an external service"
									r.operationID = "disconnectService"
									r.pathPattern = "/api/v1/integrations/{service}/disconnect"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'n': // Prefix: "note"
				origElem := elem
				if l := len("note"); len(elem) >= l && elem[0:l] == "note" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '-': // Prefix: "-templates"
					origElem := elem
					if l := len("-templates"); len(elem) >= l && elem[0:l] == "-templates" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = "GetNoteTemplates"
							r.summary = "Get note templates"
							r.operationID = "getNoteTemplates"
							r.pathPattern = "/api/v1/note-templates"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 's': // Prefix: "s"
					origElem := elem
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "GetNotes"
							r.summary = "Get a list of notes"
							r.operationID = "getNotes"
							r.pathPattern = "/api/v1/notes"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CreateNote"
							r.summary = "Create a new note"
							r.operationID = "createNote"
							r.pathPattern = "/api/v1/notes"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 's': // Prefix: "search"
							origElem := elem
							if l := len("search"); len(elem) >= l && elem[0:l] == "search" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = "SearchNotes"
									r.summary = "Search notes"
									r.operationID = "searchNotes"
									r.pathPattern = "/api/v1/notes/search"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}
						// Param: "noteId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "DeleteNote"
								r.summary = "Delete a note"
								r.operationID = "deleteNote"
								r.pathPattern = "/api/v1/notes/{noteId}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "GetNote"
								r.summary = "Get a specific note"
								r.operationID = "getNote"
								r.pathPattern = "/api/v1/notes/{noteId}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "UpdateNote"
								r.summary = "Update an existing note"
								r.operationID = "updateNote"
								r.pathPattern = "/api/v1/notes/{noteId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "draft"
								origElem := elem
								if l := len("draft"); len(elem) >= l && elem[0:l] == "draft" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "SaveNoteDraft"
										r.summary = "Save a note as draft"
										r.operationID = "saveNoteDraft"
										r.pathPattern = "/api/v1/notes/{noteId}/draft"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'i': // Prefix: "images"
								origElem := elem
								if l := len("images"); len(elem) >= l && elem[0:l] == "images" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "UploadNoteImage"
										r.summary = "Upload an image to a note"
										r.operationID = "uploadNoteImage"
										r.pathPattern = "/api/v1/notes/{noteId}/images"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 's': // Prefix: "share"
								origElem := elem
								if l := len("share"); len(elem) >= l && elem[0:l] == "share" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "DELETE":
										r.name = "UnshareNote"
										r.summary = "Unshare a previously shared note"
										r.operationID = "unshareNote"
										r.pathPattern = "/api/v1/notes/{noteId}/share"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = "ShareNote"
										r.summary = "Share a note with another user"
										r.operationID = "shareNote"
										r.pathPattern = "/api/v1/notes/{noteId}/share"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 't': // Prefix: "tags"
								origElem := elem
								if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = "AddTagsToNote"
										r.summary = "Add tags to a note"
										r.operationID = "addTagsToNote"
										r.pathPattern = "/api/v1/notes/{noteId}/tags"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 't': // Prefix: "tags"
				origElem := elem
				if l := len("tags"); len(elem) >= l && elem[0:l] == "tags" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "GET":
						r.name = "GetAllTags"
						r.summary = "Get all tags"
						r.operationID = "getAllTags"
						r.pathPattern = "/api/v1/tags"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'u': // Prefix: "users/"
				origElem := elem
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "log"
					origElem := elem
					if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'i': // Prefix: "in"
						origElem := elem
						if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "Login"
								r.summary = "Login user"
								r.operationID = "login"
								r.pathPattern = "/api/v1/users/login"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					case 'o': // Prefix: "out"
						origElem := elem
						if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "POST":
								r.name = "Logout"
								r.summary = "Logout user"
								r.operationID = "logout"
								r.pathPattern = "/api/v1/users/logout"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'r': // Prefix: "register"
					origElem := elem
					if l := len("register"); len(elem) >= l && elem[0:l] == "register" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "RegisterUser"
							r.summary = "Register a new user"
							r.operationID = "registerUser"
							r.pathPattern = "/api/v1/users/register"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}
				// Param: "userId"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "DELETE":
						r.name = "DeleteUser"
						r.summary = "Delete a user"
						r.operationID = "deleteUser"
						r.pathPattern = "/api/v1/users/{userId}"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
