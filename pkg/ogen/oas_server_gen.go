// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddTagsToNote implements addTagsToNote operation.
	//
	// Add tags to a note.
	//
	// POST /api/v1/notes/{noteId}/tags
	AddTagsToNote(ctx context.Context, req *AddTagsRequest, params AddTagsToNoteParams) (*Note, error)
	// ConnectService implements connectService operation.
	//
	// Connect to an external service.
	//
	// POST /api/v1/integrations/{service}/connect
	ConnectService(ctx context.Context, params ConnectServiceParams) error
	// CreateNote implements createNote operation.
	//
	// Create a new note.
	//
	// POST /api/v1/notes
	CreateNote(ctx context.Context, req *CreateNoteRequest) (*Note, error)
	// DeleteNote implements deleteNote operation.
	//
	// Delete a note.
	//
	// DELETE /api/v1/notes/{noteId}
	DeleteNote(ctx context.Context, params DeleteNoteParams) error
	// DeleteUser implements deleteUser operation.
	//
	// Delete a user.
	//
	// DELETE /api/v1/users/{userId}
	DeleteUser(ctx context.Context, params DeleteUserParams) error
	// DisconnectService implements disconnectService operation.
	//
	// Disconnect from an external service.
	//
	// DELETE /api/v1/integrations/{service}/disconnect
	DisconnectService(ctx context.Context, params DisconnectServiceParams) error
	// GetAllTags implements getAllTags operation.
	//
	// Get all tags.
	//
	// GET /api/v1/tags
	GetAllTags(ctx context.Context) (*GetAllTagsResponse, error)
	// GetDailySummary implements getDailySummary operation.
	//
	// Get daily note summary.
	//
	// GET /api/v1/analytics/daily
	GetDailySummary(ctx context.Context) (*NoteSummary, error)
	// GetMonthlySummary implements getMonthlySummary operation.
	//
	// Get monthly note summary.
	//
	// GET /api/v1/analytics/monthly
	GetMonthlySummary(ctx context.Context) (*NoteSummary, error)
	// GetNote implements getNote operation.
	//
	// Get a specific note.
	//
	// GET /api/v1/notes/{noteId}
	GetNote(ctx context.Context, params GetNoteParams) (*Note, error)
	// GetNoteTemplates implements getNoteTemplates operation.
	//
	// Get note templates.
	//
	// GET /api/v1/note-templates
	GetNoteTemplates(ctx context.Context) ([]string, error)
	// GetNotes implements getNotes operation.
	//
	// Get a list of notes.
	//
	// GET /api/v1/notes
	GetNotes(ctx context.Context, params GetNotesParams) (*GetNotesResponse, error)
	// GetQuarterlySummary implements getQuarterlySummary operation.
	//
	// Get quarterly note summary.
	//
	// GET /api/v1/analytics/quarterly
	GetQuarterlySummary(ctx context.Context) (*NoteSummary, error)
	// GetServiceData implements getServiceData operation.
	//
	// Get data from a connected service.
	//
	// GET /api/v1/integrations/{service}/data
	GetServiceData(ctx context.Context, params GetServiceDataParams) (*IntegrationService, error)
	// GetTagAnalytics implements getTagAnalytics operation.
	//
	// Get tag usage analytics.
	//
	// GET /api/v1/analytics/tags
	GetTagAnalytics(ctx context.Context) (*GetTagAnalyticsResponse, error)
	// GetWeeklySummary implements getWeeklySummary operation.
	//
	// Get weekly note summary.
	//
	// GET /api/v1/analytics/weekly
	GetWeeklySummary(ctx context.Context) (*NoteSummary, error)
	// GetYearlySummary implements getYearlySummary operation.
	//
	// Get yearly note summary.
	//
	// GET /api/v1/analytics/yearly
	GetYearlySummary(ctx context.Context) (*NoteSummary, error)
	// HealthCheck implements healthCheck operation.
	//
	// Check API health.
	//
	// GET /api/v1/health
	HealthCheck(ctx context.Context) (string, error)
	// Login implements login operation.
	//
	// Login user.
	//
	// POST /api/v1/users/login
	Login(ctx context.Context, req *LoginRequest) (*RegisterUserResponse, error)
	// Logout implements logout operation.
	//
	// Logout user.
	//
	// POST /api/v1/users/logout
	Logout(ctx context.Context) error
	// RegisterUser implements registerUser operation.
	//
	// Register a new user.
	//
	// POST /api/v1/users/register
	RegisterUser(ctx context.Context, req *RegisterUserRequest) (*RegisterUserResponse, error)
	// SaveNoteDraft implements saveNoteDraft operation.
	//
	// Save a note as draft.
	//
	// POST /api/v1/notes/{noteId}/draft
	SaveNoteDraft(ctx context.Context, params SaveNoteDraftParams) (*Note, error)
	// SearchNotes implements searchNotes operation.
	//
	// Search notes.
	//
	// GET /api/v1/notes/search
	SearchNotes(ctx context.Context, params SearchNotesParams) (*SearchNotesResponse, error)
	// ShareNote implements shareNote operation.
	//
	// Share a note with another user.
	//
	// POST /api/v1/notes/{noteId}/share
	ShareNote(ctx context.Context, req *ShareNoteRequest, params ShareNoteParams) error
	// UnshareNote implements unshareNote operation.
	//
	// Unshare a previously shared note.
	//
	// DELETE /api/v1/notes/{noteId}/share
	UnshareNote(ctx context.Context, params UnshareNoteParams) error
	// UpdateNote implements updateNote operation.
	//
	// Update an existing note.
	//
	// PUT /api/v1/notes/{noteId}
	UpdateNote(ctx context.Context, req *UpdateNoteRequest, params UpdateNoteParams) (*Note, error)
	// UploadNoteImage implements uploadNoteImage operation.
	//
	// Upload an image to a note.
	//
	// POST /api/v1/notes/{noteId}/images
	UploadNoteImage(ctx context.Context, req *UploadImageRequest, params UploadNoteImageParams) (*Note, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
