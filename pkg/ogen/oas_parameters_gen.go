// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AddTagsToNoteParams is parameters of addTagsToNote operation.
type AddTagsToNoteParams struct {
	NoteId string
}

func unpackAddTagsToNoteParams(packed middleware.Parameters) (params AddTagsToNoteParams) {
	{
		key := middleware.ParameterKey{
			Name: "noteId",
			In:   "path",
		}
		params.NoteId = packed[key].(string)
	}
	return params
}

func decodeAddTagsToNoteParams(args [1]string, argsEscaped bool, r *http.Request) (params AddTagsToNoteParams, _ error) {
	// Decode path: noteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "noteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NoteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "noteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ConnectServiceParams is parameters of connectService operation.
type ConnectServiceParams struct {
	Service string
}

func unpackConnectServiceParams(packed middleware.Parameters) (params ConnectServiceParams) {
	{
		key := middleware.ParameterKey{
			Name: "service",
			In:   "path",
		}
		params.Service = packed[key].(string)
	}
	return params
}

func decodeConnectServiceParams(args [1]string, argsEscaped bool, r *http.Request) (params ConnectServiceParams, _ error) {
	// Decode path: service.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Service = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteNoteParams is parameters of deleteNote operation.
type DeleteNoteParams struct {
	NoteId string
}

func unpackDeleteNoteParams(packed middleware.Parameters) (params DeleteNoteParams) {
	{
		key := middleware.ParameterKey{
			Name: "noteId",
			In:   "path",
		}
		params.NoteId = packed[key].(string)
	}
	return params
}

func decodeDeleteNoteParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteNoteParams, _ error) {
	// Decode path: noteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "noteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NoteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "noteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteUserParams is parameters of deleteUser operation.
type DeleteUserParams struct {
	UserId string
}

func unpackDeleteUserParams(packed middleware.Parameters) (params DeleteUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(string)
	}
	return params
}

func decodeDeleteUserParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteUserParams, _ error) {
	// Decode path: userId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DisconnectServiceParams is parameters of disconnectService operation.
type DisconnectServiceParams struct {
	Service string
}

func unpackDisconnectServiceParams(packed middleware.Parameters) (params DisconnectServiceParams) {
	{
		key := middleware.ParameterKey{
			Name: "service",
			In:   "path",
		}
		params.Service = packed[key].(string)
	}
	return params
}

func decodeDisconnectServiceParams(args [1]string, argsEscaped bool, r *http.Request) (params DisconnectServiceParams, _ error) {
	// Decode path: service.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Service = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetNoteParams is parameters of getNote operation.
type GetNoteParams struct {
	NoteId string
}

func unpackGetNoteParams(packed middleware.Parameters) (params GetNoteParams) {
	{
		key := middleware.ParameterKey{
			Name: "noteId",
			In:   "path",
		}
		params.NoteId = packed[key].(string)
	}
	return params
}

func decodeGetNoteParams(args [1]string, argsEscaped bool, r *http.Request) (params GetNoteParams, _ error) {
	// Decode path: noteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "noteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NoteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "noteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetNotesParams is parameters of getNotes operation.
type GetNotesParams struct {
	Page     OptInt32
	PageSize OptInt32
}

func unpackGetNotesParams(packed middleware.Parameters) (params GetNotesParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "pageSize",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt32)
		}
	}
	return params
}

func decodeGetNotesParams(args [0]string, argsEscaped bool, r *http.Request) (params GetNotesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: pageSize.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "pageSize",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "pageSize",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetServiceDataParams is parameters of getServiceData operation.
type GetServiceDataParams struct {
	Service string
}

func unpackGetServiceDataParams(packed middleware.Parameters) (params GetServiceDataParams) {
	{
		key := middleware.ParameterKey{
			Name: "service",
			In:   "path",
		}
		params.Service = packed[key].(string)
	}
	return params
}

func decodeGetServiceDataParams(args [1]string, argsEscaped bool, r *http.Request) (params GetServiceDataParams, _ error) {
	// Decode path: service.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Service = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SaveNoteDraftParams is parameters of saveNoteDraft operation.
type SaveNoteDraftParams struct {
	NoteId string
}

func unpackSaveNoteDraftParams(packed middleware.Parameters) (params SaveNoteDraftParams) {
	{
		key := middleware.ParameterKey{
			Name: "noteId",
			In:   "path",
		}
		params.NoteId = packed[key].(string)
	}
	return params
}

func decodeSaveNoteDraftParams(args [1]string, argsEscaped bool, r *http.Request) (params SaveNoteDraftParams, _ error) {
	// Decode path: noteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "noteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NoteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "noteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SearchNotesParams is parameters of searchNotes operation.
type SearchNotesParams struct {
	Query string
}

func unpackSearchNotesParams(packed middleware.Parameters) (params SearchNotesParams) {
	{
		key := middleware.ParameterKey{
			Name: "query",
			In:   "query",
		}
		params.Query = packed[key].(string)
	}
	return params
}

func decodeSearchNotesParams(args [0]string, argsEscaped bool, r *http.Request) (params SearchNotesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: query.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "query",
			Style:   uri.QueryStyleForm,
			Explode: false,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Query = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "query",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ShareNoteParams is parameters of shareNote operation.
type ShareNoteParams struct {
	NoteId string
}

func unpackShareNoteParams(packed middleware.Parameters) (params ShareNoteParams) {
	{
		key := middleware.ParameterKey{
			Name: "noteId",
			In:   "path",
		}
		params.NoteId = packed[key].(string)
	}
	return params
}

func decodeShareNoteParams(args [1]string, argsEscaped bool, r *http.Request) (params ShareNoteParams, _ error) {
	// Decode path: noteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "noteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NoteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "noteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UnshareNoteParams is parameters of unshareNote operation.
type UnshareNoteParams struct {
	NoteId string
}

func unpackUnshareNoteParams(packed middleware.Parameters) (params UnshareNoteParams) {
	{
		key := middleware.ParameterKey{
			Name: "noteId",
			In:   "path",
		}
		params.NoteId = packed[key].(string)
	}
	return params
}

func decodeUnshareNoteParams(args [1]string, argsEscaped bool, r *http.Request) (params UnshareNoteParams, _ error) {
	// Decode path: noteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "noteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NoteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "noteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateNoteParams is parameters of updateNote operation.
type UpdateNoteParams struct {
	NoteId string
}

func unpackUpdateNoteParams(packed middleware.Parameters) (params UpdateNoteParams) {
	{
		key := middleware.ParameterKey{
			Name: "noteId",
			In:   "path",
		}
		params.NoteId = packed[key].(string)
	}
	return params
}

func decodeUpdateNoteParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateNoteParams, _ error) {
	// Decode path: noteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "noteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NoteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "noteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UploadNoteImageParams is parameters of uploadNoteImage operation.
type UploadNoteImageParams struct {
	NoteId string
}

func unpackUploadNoteImageParams(packed middleware.Parameters) (params UploadNoteImageParams) {
	{
		key := middleware.ParameterKey{
			Name: "noteId",
			In:   "path",
		}
		params.NoteId = packed[key].(string)
	}
	return params
}

func decodeUploadNoteImageParams(args [1]string, argsEscaped bool, r *http.Request) (params UploadNoteImageParams, _ error) {
	// Decode path: noteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "noteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.NoteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "noteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
