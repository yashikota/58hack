openapi: 3.0.0
info:
  title: Chronotes API
  version: v1
tags:
  - name: Users
  - name: Notes
  - name: Health
paths:
  /api/v1/health:
    get:
      operationId: healthCheck
      summary: Check API health
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Health
      security:
        - {}
  /api/v1/notes:
    post:
      operationId: createNote
      summary: Create a new note
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      security:
        - BearerAuth: []
    get:
      operationId: getNotes
      summary: Get a list of notes
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
          explode: false
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
  /api/v1/notes/list:
    get:
      operationId: getNoteList
      summary: Get a note list
      parameters:
        - name: from
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
        - name: to
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
  /api/v1/notes/note:
    get:
      operationId: getNote
      summary: Get a note
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date-time
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
  /api/v1/notes/search:
    get:
      operationId: searchNotes
      summary: Search notes
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchNotesResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Notes
      security:
        - BearerAuth: []
  /api/v1/users/accounts:
    put:
      operationId: connectService
      summary: Connect to an external service
      parameters: []
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/v1/users/login:
    post:
      operationId: login
      summary: Login user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security:
        - BearerAuth: []
  /api/v1/users/logout:
    post:
      operationId: logout
      summary: Logout user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/v1/users/me:
    delete:
      operationId: deleteUser
      summary: Delete a user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      security:
        - BearerAuth: []
  /api/v1/users/register:
    post:
      operationId: registerUser
      summary: Register a new user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      security:
        - {}
components:
  schemas:
    AddTagsRequest:
      type: object
      required:
        - tags
      properties:
        tags:
          type: string
      example:
        tags: important, urgent, project
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      example:
        message: 'message: Error'
    LoginIdentifier:
      anyOf:
        - type: string
        - type: string
    LoginRequest:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          $ref: '#/components/schemas/LoginIdentifier'
        password:
          type: string
      example:
        identifier: test@example.com or test123
        password: password
    Note:
      type: object
      required:
        - note_id
        - title
        - content
        - tags
        - createdAt
        - updatedAt
      properties:
        note_id:
          type: string
        title:
          type: string
        content:
          type: string
        tags:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        note_id: note123
        title: My First Note
        content: This is the content of my first note.
        tags: work, project
        createdAt: 2023-01-01T12:00:00Z
        updatedAt: 2023-01-01T12:30:00Z
    RegisterUserRequest:
      type: object
      required:
        - user_id
        - user_name
        - email
        - password
      properties:
        user_id:
          type: string
        user_name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        user_id: test123
        user_name: hoge太郎
        email: test@example.com
        password: password
    RegisterUserResponse:
      type: object
      required:
        - user
        - token
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    SearchNotesResponse:
      type: object
      required:
        - notes
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
      example:
        notes:
          - note_id: note123
            title: My First Note
            content: This is the content of my first note.
            tags: work, project
            createdAt: 2023-01-01T12:00:00Z
            updatedAt: 2023-01-01T12:30:00Z
          - note_id: note123
            title: My First Note
            content: This is the content of my first note.
            tags: work, project
            createdAt: 2023-01-01T12:00:00Z
            updatedAt: 2023-01-01T12:30:00Z
    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
      example:
        message: 'message: Success'
    UpdateNoteRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        tags:
          type: string
      example:
        title: Updated Note Title
        content: This is the updated content of my note.
        tags: go, python
    User:
      type: object
      required:
        - user_id
        - user_name
        - email
        - createdAt
        - updatedAt
      properties:
        user_id:
          type: string
        user_name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        user_id: test123
        user_name: hoge太郎
        email: test@example.com
        createdAt: 2024-10-01T19:30:06Z
        updatedAt: 2024-10-02T03:34:56Z
    Versions:
      type: string
      enum:
        - v1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
servers:
  - url: https://chronotes.yashikota.com
    description: prd
    variables: {}
  - url: http://localhost:5678
    description: dev
    variables: {}
